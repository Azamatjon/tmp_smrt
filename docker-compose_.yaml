version: '2'


services:
  # Certificate Authority (CA) for generating identities
  ca.example.com:
    image: hyperledger/fabric-ca:latest
    environment:
      - FABRIC_CA_HOME=/etc/hyperledger/fabric-ca-server
      - FABRIC_CA_SERVER_CA_NAME=ca.example.com
      - FABRIC_CA_SERVER_TLS_ENABLED=true
    ports:
      - "7054:7054"
    command: sh -c 'fabric-ca-server start -b admin:adminpw'
    container_name: ca.example.com
    networks:
      - fabric-network
    volumes:
      - ./crypto-config/ca:/etc/hyperledger/fabric-ca-server

  # Orderer Service
  orderer.example.com:
    image: hyperledger/fabric-orderer:latest
    environment:
      - ORDERER_GENERAL_LOGLEVEL=INFO
      - ORDERER_GENERAL_LISTENADDRESS=0.0.0.0
      - ORDERER_GENERAL_LOCALMSPID=OrdererMSP
      - ORDERER_GENERAL_LOCALMSPDIR=/var/hyperledger/orderer/msp
      - ORDERER_CHANNELPARTICIPATION_ENABLED=true
      - ORDERER_GENERAL_TLS_ENABLED=true  # Enable TLS
      - ORDERER_GENERAL_TLS_PRIVATEKEY=/var/hyperledger/orderer/tls/server.key
      - ORDERER_GENERAL_TLS_CERTIFICATE=/var/hyperledger/orderer/tls/server.crt
      - ORDERER_GENERAL_TLS_ROOTCAS=[/var/hyperledger/orderer/tls/ca.crt]
      - ORDERER_METRICS_PROVIDER=prometheus  # Enable Prometheus metrics
    volumes:
      - ./config/orderer.yaml:/etc/hyperledger/fabric/orderer.yaml
      - ./crypto-config/ordererOrganizations/example.com/orderers/orderer.example.com:/var/hyperledger/orderer
    ports:
      - "7050:7050"
      - "9443:9443"  # Expose Prometheus metrics port
    container_name: orderer.example.com
    networks:
      - fabric-network


  # Peer0 Organization1
  peer0.org1.example.com:
    image: hyperledger/fabric-peer:latest
    environment:
      - CORE_PEER_ID=peer0.org1.example.com
      - CORE_PEER_ADDRESS=peer0.org1.example.com:7051
      - CORE_PEER_LISTENADDRESS=0.0.0.0:7051
      - CORE_PEER_CHAINCODEADDRESS=peer0.org1.example.com:7052
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer0.org1.example.com:7051
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer0.org1.example.com:7051
      - CORE_PEER_LOCALMSPID=Org1MSP
      - CORE_PEER_MSPCONFIGPATH=/etc/hyperledger/msp/peer/
    volumes:
      - ./crypto-config/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/msp:/etc/hyperledger/msp/peer
      - ./crypto-config/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls:/etc/hyperledger/tls
      - ./peer-data:/var/hyperledger/production
      - ./config:/etc/hyperledger/config
    ports:
      - "7051:7051"
      - "7053:7053"
      - "9444:9443"
    container_name: peer0.org1.example.com
    networks:
      - fabric-network

  # CLI for Managing Hyperledger
  cli:
    image: hyperledger/fabric-tools:latest
    tty: true
    environment:
      - GOPATH=/opt/gopath
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      - FABRIC_LOGGING_SPEC=DEBUG
      - CORE_PEER_ID=cli
      - CORE_PEER_ADDRESS=peer0.org1.example.com:7051
      - CORE_PEER_LOCALMSPID=Org1MSP
      - CORE_PEER_MSPCONFIGPATH=/etc/hyperledger/msp/users/Admin@org1.example.com/msp
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: /bin/bash
    volumes:
      - /var/run/:/host/var/run/
      - ./chaincode:/opt/gopath/src/github.com/chaincode
      - ./crypto-config:/etc/hyperledger/msp
      - ./config:/etc/hyperledger/config
    container_name: cli
    depends_on:
      - peer0.org1.example.com
      - orderer.example.com
    networks:
      - fabric-network

  ipfs-node:
    image: ipfs/go-ipfs:latest
    container_name: ipfs-node
    ports:
      - "4001:4001"     # Swarm port for other IPFS nodes
      - "5001:5001"     # API port for interacting with IPFS
      - "8089:8080"     # Gateway port for HTTP access
    volumes:
      - ./ipfs-data:/data/ipfs
    environment:
      IPFS_PROFILE: "server"  # Optional: profile for reduced memory usage in a server environment
    command: daemon

  # Prometheus Service
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - fabric-network

  mongodb:
    image: mongo:latest
    container_name: mongodb
    ports:
      - "27017:27017"  # Exposing MongoDB default port
    environment:
      MONGO_INITDB_ROOT_USERNAME: root      # Set the root username
      MONGO_INITDB_ROOT_PASSWORD: example   # Set the root password
      MONGO_INITDB_DATABASE: blockchain_db
    volumes:
      - ./mongo-data:/data/db                # Persisting database data
    networks:
      - mongo_network

  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    ports:
      - "4000:4000"
    environment:
      NODE_ENV: development
      DB_HOST: mongodb
      DB_PORT: 27017
      DB_USERNAME: root
      DB_PASSWORD: example
      DB_NAME: blockchain_db
      APP_PORT: 4000
      JWT_SECRET: your_jwt_secret_key
    networks:
      - mongo_network
    depends_on:
      - mongodb

  client:
    build:
      context: ./client
      dockerfile: Dockerfile
      args:
        REACT_APP_API: http://localhost:4000/graphql
        REACT_APP_WEBSOCKET: ws://localhost:4000/graphql
    container_name: react-client
    ports:
      - "3000:80"  # Exposing React application default port
    networks:
      - mongo_network
    depends_on:
      - mongodb



networks:
  fabric-network:
    driver: bridge
  ipfs_network:
    driver: bridge
  mongo_network:
    driver: bridge